---
# Name: staging/values.yaml
# Purpose: Staging environment Helm values for Jenkins wrapper chart configuration
# Description: Environment-specific overrides for staging deployment including
# image versioning, resource allocation, JVM optimization, and JCasC variables.
# Inherits base configuration from base/jenkins/values.yaml.
#
# persistence.size: Staging-appropriate storage allocation (4Gi)
# jenkins.controller.image: Staging image tag and pull policy optimization
# jenkins.controller.resources: Resource limits appropriate for staging workloads
# jenkins.controller.javaOpts: JVM tuning for staging memory constraints
# jenkins.controller.containerEnv: Environment variables for JCasC configuration
# jenkins.controller.ingress: External access configuration for staging environment

# Staging-specific persistence configuration
# Storage size configured in jenkins.persistence section below

# Jenkins subchart configuration overrides
# Inherits base configuration from: base/jenkins/values.yaml
jenkins:
  # Service account configuration for AWS IAM role assumption
  serviceAccount:
    annotations:
      "eks.amazonaws.com/role-arn": "arn:aws:iam::156041419073:role/jenkins-staging-irsa"

  controller:
    # Container image configuration for staging environment
    # Uses specific commit SHA for staging validation
    # Pull policy optimized for staging (caching enabled)
    image:
      registry: "ghcr.io"
      repository: "lfit/jenkins"
      tag: "main-2b06ad4"
      pullPolicy: "IfNotPresent"

    # Lifecycle hooks to fix 1Password CLI directory permissions after fsGroup applies
    lifecycle:
      postStart:
        exec:
          command:
          - "/bin/sh"
          - "-c"
          # yamllint disable-line rule:line-length
          - "mkdir -p /var/jenkins_home/.config/op && chmod 700 /var/jenkins_home/.config/op && if [ -f /var/jenkins_home/.config/op/config ]; then chmod 600 /var/jenkins_home/.config/op/config; else echo '[INFO] /var/jenkins_home/.config/op/config does not exist, skipping chmod'; fi"
          # yamllint enable-line rule:line-length

    # Plugin management - use only plugins baked into image
    # Prevents plugin version conflicts in staging environment
    installPlugins: false

    # Kubernetes health probe configuration for staging environment
    # Increase startup probe timeout to accommodate Jenkins initialization with plugins
    # Default: 12 failures × 10s = 120s, Updated: 18 failures × 10s = 180s (3 minutes)
    probes:
      startupProbe:
        failureThreshold: 18

    # Jenkins Configuration as Code
    JCasC:
      defaultConfig: false
      configScripts:
        # OFFICIAL MULTIPLE ROOT KEYS PATTERN
        # Organizes configurations by root key type to eliminate merge conflicts
        # Based on jenkinsci/configuration-as-code-plugin official documentation

        jenkins-config: |
          jenkins:
            # Global environment variables available to all Jenkins jobs
            globalNodeProperties:
              - envVars:
                  env:
                    - key: "RELEASE_EMAIL"
                      value: '${JCASC_RELEASE_EMAIL:-noreply@opensearch.org}'
                    - key: "WORKSPACE_CLEANUP"
                      value: '${JCASC_WORKSPACE_CLEANUP:-true}'
                    - key: "DISABLE_DEFERRED_WIPEOUT"
                      value: '${JCASC_DISABLE_DEFERRED_WIPEOUT:-false}'
                    - key: "AWS_REGION"
                      value: '${JCASC_AWS_REGION:-us-west-2}'
                    - key: "GIT_BASE"
                      value: '${JCASC_GIT_BASE:-https://github.com}'
                    - key: "GIT_URL"
                      value: '${JCASC_GIT_URL:-https://github.com}'
                    - key: "GITHUB_API_URL"
                      value: '${JCASC_GITHUB_API_URL:-https://api.github.com}'
                    - key: "LANG"
                      value: '${JCASC_LANG:-C.UTF-8}'
                    - key: "CI_ENVIRONMENT"
                      value: '${JCASC_SILO}'
                    - key: "JENKINS_URL"
                      value: '${JCASC_JENKINS_URL}'
                    - key: "JCASC_GITHUB_CREDENTIALS_ID"
                      value: "github-token"
                    - key: "SAML_METADATA_URL"
                      value: '${SAML_METADATA_URL}'
                    - key: "SAML_LOGOUT_URL"
                      value: '${SAML_LOGOUT_URL}'

            # CSRF protection configuration
            crumbIssuer:
              standard:
                excludeClientIPFromCrumb: false

            # Disable "Remember me" for enhanced security
            disableRememberMe: true

            # SAML SSO authentication via Linux Foundation identity provider
            securityRealm:
              saml:
                binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
                displayNameAttributeName: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
                emailAttributeName: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
                groupsAttributeName: "http://schemas.xmlsoap.org/claims/Group"
                idpMetadataConfiguration:
                  period: 60
                  url: "${SAML_METADATA_URL}"
                logoutUrl: "${SAML_LOGOUT_URL}"
                maximumAuthenticationLifetime: 86400

            # Authorization strategy - allow anonymous read access
            authorizationStrategy:
              globalMatrix:
                permissions:
                  - "Overall/Administer:authenticated"
                  - "Overall/Read:anonymous"
                  - "Job/Read:anonymous"
                  - "View/Read:anonymous"

            # Kubernetes cloud configuration for dynamic build agents
            clouds:
              - kubernetes:
                  name: "kubernetes"
                  serverUrl: "${JCASC_KUBERNETES_URL:-https://kubernetes.default.svc.cluster.local}"
                  namespace: "${JCASC_KUBERNETES_NAMESPACE:-default}"
                  credentialsId: ""
                  jenkinsUrl: "${JCASC_KUBERNETES_JENKINS_URL:-http://jenkins:8080}"
                  jenkinsTunnel: "${JCASC_KUBERNETES_JENKINS_TUNNEL:-jenkins:50000}"
                  containerCap: 10
                  maxRequestsPerHostStr: "32"
                  retentionTimeout: 180
                  connectTimeout: 10
                  readTimeout: 20
                  waitForPodSec: 600
                  usageRestricted: false
                  garbageCollection:
                    timeout: 300
                  podLabels:
                    - key: "jenkins"
                      value: "slave"
                    - key: "app.kubernetes.io/managed-by"
                      value: "jenkins"
                    - key: "app.kubernetes.io/part-of"
                      value: "cicd"
                  templates:
                    - name: "default-agent"
                      label: "kubernetes"
                      nodeUsageMode: "NORMAL"
                      containers:
                        - name: "jnlp"
                          image: "jenkins/inbound-agent:latest"
                          args: "^${computer.jnlpmac} ^${computer.name}"
                          resourceRequestCpu: "200m"
                          resourceRequestMemory: "256Mi"
                          resourceLimitCpu: "500m"
              # EC2 cloud configuration for AWS-based build agents
              - amazonEC2:
                  name: "aws-ec2"
                  region: "us-west-2"
                  useInstanceProfileForCredentials: false
                  sshKeysCredentialsId: "opensearch-ec2-key"
                  templates:
                    - ami: "ami-0095b2d932ba790f3"
                      amiType:
                        unixData:
                          sshPort: "22"
                      associatePublicIp: false
                      connectBySSHProcess: false
                      connectionStrategy: PRIVATE_IP
                      customDeviceMapping: "/dev/xvda=:300:true:::encrypted"
                      deleteRootOnTermination: true
                      description: "jenkins-agent-staging-test"
                      ebsEncryptRootVolume: ENCRYPTED
                      ebsOptimized: false
                      hostKeyVerificationStrategy: OFF
                      idleTerminationMinutes: "60"
                      initScript: >
                        sudo dnf clean all && sudo rm -rf /var/cache/dnf && sudo dnf repolist &&
                        sudo dnf update --releasever=latest --skip-broken --exclude=openssh*
                        --exclude=docker* --exclude=gh* --exclude=openssl* -y &&
                        sudo dnf install -y java-17-openjdk-devel git &&
                        docker ps
                      labelString: "jenkins-agent-staging-test"
                      launchTimeoutStr: "300"
                      maxTotalUses: 10
                      metadataEndpointEnabled: true
                      metadataHopsLimit: "2"
                      metadataTokensRequired: true
                      minimumNumberOfInstances: 0
                      minimumNumberOfSpareInstances: 0
                      mode: NORMAL
                      monitoring: false
                      numExecutors: "1"
                      remoteAdmin: "ec2-user"
                      remoteFS: "/home/ec2-user"
                      securityGroups: "jenkins-worker"
                      subnetId: "subnet-04399db8294cd0293 subnet-0ef5970bb206ba8d6 subnet-0134f063a963ef06e"
                      stopOnTerminate: false
                      t2Unlimited: false
                      tenancy: Default
                      type: "c5.4xlarge"
                      useEphemeralDevices: false

        credentials-config: |
          credentials:
            system:
              domainCredentials:
                - credentials:
                  # 1Password Service Account Token (standard string credential)
                  - string:
                      id: "onepassword-service-account"
                      description: "1Password service account token for secret access"
                      secret: "${ONEPASSWORD_SA_TOKEN}"

                  # GitHub Service Account Token for CI/CD Operations
                  - string:
                      id: "${GITHUB_CREDENTIALS_ID}"
                      description: "GitHub opensearch-jenkins service account token"
                      secret: "${OPENSEARCH_GITHUB_TOKEN}"

                  # SSH Private Key for OpenSearch EC2 Agents
                  - basicSSHUserPrivateKey:
                      scope: GLOBAL
                      id: "opensearch-ec2-key"
                      username: "ec2-user"
                      description: "SSH key for OpenSearch EC2 agents"
                      privateKeySource:
                        directEntry:
                          privateKey: "${OPENSEARCH_EC2_PRIVATE_KEY}"

        unclassified-config: |
          unclassified:
            # GitHub plugin configuration
            gitHubConfiguration:
              apiRateLimitChecker: ThrottleForNormalize

            gitHubPluginConfig:
              configs:
                - name: "opensearch-project"
                  credentialsId: "${GITHUB_CREDENTIALS_ID}"
              hookUrl: "${JENKINS_URL}/github-webhook/"

            # GitHub Pull Request Builder configuration
            ghprbTrigger:
              cron: "H/5 * * * *"
              githubAuth:
                - id: "opensearch-project-ghprb-auth"
                  serverAPIUrl: "${GITHUB_API_URL}"
                  credentialsId: "${GITHUB_CREDENTIALS_ID}"
                  description: "GitHub auth for opensearch-project PR builder"
              adminlist: ""
              manageWebhooks: false
              okToTestPhrase: ".*ok to test.*"
              retestPhrase: ".*test this please.*"
              skipBuildPhrase: ".*\\[skip ci\\].*"

        tool-config: |
          tool:
            # Java Development Kit configuration
            jdk:
              installations:
                - name: "jdk-17"
                  home: "/opt/java/openjdk"

            # Git version control system configuration
            git:
              installations:
                - name: "Default"
                  home: "git"

    # Resource allocation for staging environment
    # Lower resource limits appropriate for development/testing workloads
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"

    # JVM optimization for staging memory constraints
    # Memory settings aligned with resource limits above
    javaOpts: >-
      -XX:+UseG1GC
      -XX:+UseStringDeduplication
      -XX:+ParallelRefProcEnabled
      -XX:+DisableExplicitGC
      -Xmx1536m
      -XX:MaxMetaspaceSize=256m

    # Environment variables for Jenkins container (JCasC configuration)
    # Variables consumed by: base/jenkins/jcasc_yamls/ configuration files
    # Environment-specific values for staging deployment context
    containerEnv:
    # System Configuration (01-global-env-vars.yaml)
    - name: JCASC_SILO
      value: "staging"
    - name: JCASC_JENKINS_URL
      value: "https://jenkins-stag.opensearch.cluster.linuxfound.info/"
    - name: JENKINS_URL
      value: "https://jenkins-stag.opensearch.cluster.linuxfound.info/"
    - name: JCASC_LOCATION_URL
      value: ""
    - name: JCASC_LOCATION_ADMINADDRESS
      value: ""
    - name: JCASC_SYSTEM_MESSAGE
      value: "Welcome to Jenkins (Staging Environment)"
    - name: JCASC_MASTER_LABELS
      value: "staging-controller"
    - name: JCASC_RESOURCE_ROOT_URL
      value: ""

    # Build and Performance Configuration
    - name: JCASC_BUILD_TIMEOUT
      value: "3600"
    - name: JCASC_MAVEN_OPTS
      value: "-Xmx2048m -XX:MaxMetaspaceSize=512m"
    - name: JCASC_NODE_OPTIONS
      value: "--max-old-space-size=4096"
    - name: JCASC_SCM_POLLING_THREADCOUNT
      value: "5"

    # Integration Configuration (placeholders for future configuration)
    - name: JCASC_LOG_LEVEL
      value: "ERROR"
    - name: JCASC_ARTIFACTORY_URL
      value: ""
    - name: JCASC_DOCKER_REGISTRY
      value: ""
    - name: GITHUB_CREDENTIALS_ID
      value: "github-token"
    - name: JCASC_S3_BUCKET
      value: ""
    - name: JCASC_CDN_URL
      value: ""
    - name: JCASC_ARTIFACTS_RETENTION_DAYS
      value: ""
    - name: JCASC_ECR_REGISTRY_URL
      value: ""

    # Security Configuration (02-security.yaml integration)
    - name: JCASC_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: jenkins-lf-admin
          key: admin-password

    # SAML Configuration
    - name: SAML_METADATA_URL
      value: "https://sso.linuxfoundation.org/samlp/metadata/Sa8MIoI91JUE3154tjDzTATsEeiehGaZ"
    - name: SAML_LOGOUT_URL
      value: "https://sso.linuxfoundation.org/samlp/Sa8MIoI91JUE3154tjDzTATsEeiehGaZ/logout"

    # 1Password Service Account Token (ESO-managed)
    - name: ONEPASSWORD_SA_TOKEN
      valueFrom:
        secretKeyRef:
          name: onepassword-sa-token
          key: token

    # 1Password CLI Service Account Token (required by 1Password CLI)
    - name: OP_SERVICE_ACCOUNT_TOKEN
      valueFrom:
        secretKeyRef:
          name: onepassword-sa-token
          key: token

    # EC2 SSH Private Key (ESO-managed from 1Password)
    - name: OPENSEARCH_EC2_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: opensearch-jenkins-ec2-key
          key: private-key

    # GitHub Token (ESO-managed from 1Password)
    - name: OPENSEARCH_GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: opensearch-jenkins-github-token
          key: password

    # Kubernetes Cloud Configuration (07-cloud-agents.yaml integration)
    - name: JCASC_KUBERNETES_URL
      value: "https://kubernetes.default.svc.cluster.local"
    - name: JCASC_KUBERNETES_NAMESPACE
      value: "jenkins-staging"
    - name: JCASC_KUBERNETES_JENKINS_URL
      value: "http://jenkins-staging.jenkins-staging.svc.cluster.local:8080"
    - name: JCASC_KUBERNETES_JENKINS_TUNNEL
      value: "jenkins-staging-agent.jenkins-staging.svc.cluster.local:50000"

    # External access configuration for staging environment
    # Provides public access for development and testing workflows
    ingress:
      enabled: true
      apiVersion: networking.k8s.io/v1
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
      hostName: jenkins-stag.opensearch.cluster.linuxfound.info
      path: /
      tls:
      - secretName: jenkins-staging-tls
        hosts:
        - jenkins-stag.opensearch.cluster.linuxfound.info

  # Defining resource requests and limits for the staging environment.
  resources:
    requests:
      cpu: "1000m"
      memory: "2Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"

  jenkinsJavaOpts: "-Xms1g -Xmx2g"

  persistence:
    enabled: true
    storageClass: "auto-ebs-sc"
    size: "20Gi"
